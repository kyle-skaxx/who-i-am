const validate = (expected, actual) => validateFrom(expected, actual, '')

const typeString = (obj) => ({}.toString.call(obj).slice(8, -1).toLowerCase())

const validateFrom = (expected, actual, prefix) => {
  const errors = []

  for (const k in expected) {
    const path = `${prefix}.${k}`
    const v = expected[k]
    const wv = typeString(v) === 'object' ? 'an object' : JSON.stringify(v)

    if (!(k in actual)) {
      errors.push(`at ${path}: expected ${wv} but was missing`)
      continue
    }

    if (v != null && typeof v === 'object') {
      if (actual[k] == null || typeof actual[k] != 'object') {
        errors.push(
          `at ${path}: expected an ${typeString(v)} but got ${typeString(
            actual[k]
          )}`
        )
        continue
      }

      errors.push(...validateFrom(expected[k], actual[k], path))
      continue
    }

    if (actual[k] != expected[k]) {
      errors.push(
        `at ${path}: expected ${JSON.stringify(v)} but got ${JSON.stringify(
          actual[k]
        )}`
      )
    }
  }

  return errors.map((e) => async () => {
    throw new Error(e)
  })
}

module.exports = validate
