const CP = require('child_process')
const FS = require('fs').promises
const Path = require('path/posix')
const OS = require('os')
const chalk = require('chalk')
const commentJson = require('comment-json')

const { existsSync } = require('fs')

const validateJson = require('./validate-json')

const CHECK_MARK = chalk.green('\u2713')
const CROSS_MARK = chalk.red('\u2717')

const $ = (command, ...args) =>
  new Promise((resolve, reject) => {
    CP.execFile(command, args, (err, stdout, stderr) => {
      if (err == null) {
        resolve(stdout.trim() || stderr.trim())
      } else {
        reject(err)
      }
    })
  })

const check = (msg, cmd) => async () => {
  try {
    const value = await $(...cmd)
    return `${msg} = ${value}`
  } catch (e) {
    throw new Error(`Failed trying to check "${msg}": ${e.message}`)
  }
}

const report = async (sections) => {
  let failed = 0
  let total = 0
  for (const { title, items } of sections) {
    process.stdout.write(`${title}:\n\n`)
    for (const task of items) {
      total++
      try {
        const msg = await task()
        process.stdout.write(` [ ${CHECK_MARK} ] ${msg}\n`)
      } catch (err) {
        failed++
        process.stdout.write(` [ ${CROSS_MARK} ] ${err.message.trim()}\n`)
      }
    }
    process.stdout.write('\n')
  }

  if (failed > 0) {
    process.stdout.write(`RESULT: (${failed}/${total}) checks failed\n\n`)
    throw new Error(`Some checks failed`)
  }

  process.stdout.write(`RESULT: ${total} checks passed\n\n`)
}

const getPlatform = () => {
  const platform = OS.platform()
  const release = OS.release()

  switch (platform.toLowerCase()) {
    case 'linux':
      if (release.toLowerCase().includes('microsoft')) {
        return 'wsl'
      }

      return 'linux'

    case 'darwin':
      return 'darwin'

    default:
      throw new Error(
        `Sorry, I don't know what to do with platform ${platform}`
      )
  }
}

const findVsCodeUserSettings = async () => {
  switch (getPlatform()) {
    case 'darwin':
      return `${OS.homedir()}/Library/Application Support/Code/User/settings.json`

    case 'linux':
      return `${OS.homedir()}/.config/Code/User/settings.json`

    case 'wsl': {
      const APPDATA = await $('wslvar', 'APPDATA')
      const path = await $('wslpath', `${APPDATA}`)

      return `${path}/Code/User/settings.json`
    }
  }
}

const getPythonPath = async () => {
  let systemPython
  try {
    systemPython = await $('which', 'python')
  } catch (e) {
    /* ignore */
  }

  // this is the python that npm will use
  const npmPython = await $('npm', 'config', 'get', 'python')
  if (npmPython && npmPython !== 'undefined') {
    return npmPython
  }

  if (systemPython != null) {
    return systemPython
  }

  throw new Error(`Couldn't find a version of python`)
}

const checkPython = async () => {
  const path = await getPythonPath()
  try {
    const version = await $(path, '--version')
    return `Found python version: ${version} at ${path}`
  } catch (e) {
    throw new Error(`Couldn't get python version at ${path}`)
  }
}

const checkForNVMDir = async () => {
  const HOME = OS.homedir()
  if (existsSync(`${HOME}/.nvm`)) {
    return `${HOME}/.nvm exists`
  }

  throw new Error(`${HOME}/.nvm missing`)
}

const checkForNVMConfig = async () => {
  const HOME = OS.homedir()
  try {
    const zshRc = await FS.readFile(`${HOME}/.zshrc`, 'latin1')
    const nvmShIndex = zshRc.indexOf('export NVM_DIR')
    if (nvmShIndex !== -1) {
      return 'NVM config found in ~/.zshrc'
    } else {
      throw new Error('Config missing from ~/.zshrc')
    }
  } catch (err) {
    throw new Error(`Failed to read ~/.zshrc looking for NVM config`)
  }
}

const pluginsOnWindows = async () => {
  const USERPROFILE = await $('wslvar', 'USERPROFILE')
  const path = await $('wslpath', `${USERPROFILE}`)
  const items = await FS.readdir(Path.join(path, '.vscode', 'extensions'))
  const plugins = new Set()
  for (const item of items) {
    const match = /(.*)-\d+/.exec(item)
    if (match && match[1]) {
      plugins.add(match[1])
    }
  }

  return plugins
}

const listExtensions = async () => {
  try {
    const pluginsRaw = await $('code', '--list-extensions')
    const plugins = new Set(pluginsRaw.trim().split('\n'))

    return plugins
  } catch (e) {
    const platform = getPlatform()
    if (platform === 'wsl') {
      return await pluginsOnWindows()
    }

    throw e
  }
}

const plugins = async () => {
  const lookupPlugin = (promise, k) => async () => {
    const plugins = await promise
    if (plugins.has(k)) {
      return `VSCode extension '${k}' installed`
    }

    throw new Error(`VSCode extension '${k}' missing`)
  }

  let plugins
  try {
    plugins = await listExtensions()
  } catch (_) {
    return []
  }

  const eslint = lookupPlugin(plugins, 'dbaeumer.vscode-eslint')
  const prettier = lookupPlugin(plugins, 'esbenp.prettier-vscode')
  const liveShare = lookupPlugin(plugins, 'ms-vsliveshare.vsliveshare')
  const gitLens = lookupPlugin(plugins, 'eamodio.gitlens')

  return [eslint, prettier, liveShare, gitLens]
}

const checkVsCodeSettings = async () => {
  try {
    const configPath = await findVsCodeUserSettings()
    const json = await FS.readFile(configPath, 'utf8')
    const config = commentJson.parse(json)
    const expected = {
      'editor.tabSize': 2,
      'editor.codeActionsOnSave': { 'source.fixAll.eslint': true },
      'editor.bracketPairColorization.enabled': true,
      'editor.guides.bracketPairs': 'active',
      '[javascript]': {
        'editor.formatOnSave': true,
        'editor.defaultFormatter': 'esbenp.prettier-vscode',
      },
      'prettier.semi': false,
      'prettier.singleQuote': true,
    }

    return await validateJson(expected, config)
  } catch (e) {
    return [
      async () => {
        throw new Error('Failed to read your VS Code settings file')
      },
    ]
  }
}

const main = async () => {
  // checking that we have zsh and it is our shell
  const shell = async () => {
    const { SHELL } = process.env
    if (!SHELL) {
      throw new Error(`$SHELL not defined`)
    }

    if (!SHELL.endsWith('/zsh')) {
      throw new Error(`$SHELL should be "zsh"`)
    }

    return `$SHELL = ${SHELL}`
  }

  const zshVersion = check('ZSH version', ['zsh', '--version'])
  const nodeVersion = check('Node version', ['node', '--version'])
  const npmVersion = check('NPM version', ['npm', '--version'])
  const cc = check('Found cc', ['which', 'cc'])
  const make = check('Found make', ['which', 'make'])

  const VSCodeVersion = async () => {
    try {
      const output = await $('code', '--version')
      const firstLine = output.split('\n')[0]
      return `Visual Studio Code version = ${firstLine}`
    } catch (e) {
      throw new Error(`Couldn't find VS Code`)
    }
  }

  const gitVersion = check('Git version', ['git', '--version'])
  const gitEditor = async () => {
    const editor = await $('git', 'config', '--global', '--get', 'core.editor')
    if (editor === 'code --wait') {
      return `Git editor is ${editor}`
    }

    throw new Error(`Git editor should be code --wait, but is ${editor}`)
  }

  if (process.argv.slice(2).indexOf('--rad') !== -1) {
    process.stdout.write(`
 .o88b. db   db d88888b  .o88b. db   dD db      d888888b .d8888. d888888b
d8P  Y8 88   88 88'     d8P  Y8 88 ,8P' 88        \`88'   88'  YP \`~~88~~'
8P      88ooo88 88ooooo 8P      88,8P   88         88    \`8bo.      88
8b      88~~~88 88~~~~~ 8b      88\`8b   88         88      \`Y8b.    88
Y8b  d8 88   88 88.     Y8b  d8 88 \`88. 88booo.   .88.   db   8D    88
 \`Y88P' YP   YP Y88888P  \`Y88P' YP   YD Y88888P Y888888P \`8888Y'    YP\n\n\n`)
  }
  await report([
    {
      title: 'Shell environment',
      items: [getPlatform, shell, zshVersion],
    },
    {
      title: 'Node setup',
      items: [checkForNVMDir, checkForNVMConfig, nodeVersion, npmVersion],
    },
    {
      title: 'Visual studio code',
      items: [
        VSCodeVersion,
        gitEditor,
        ...(await plugins()),
        ...(await checkVsCodeSettings()),
      ],
    },
    {
      title: 'Build requirements (for node-gyp)',
      items: [gitVersion, cc, make, checkPython],
    },
  ])
}

module.exports = main
